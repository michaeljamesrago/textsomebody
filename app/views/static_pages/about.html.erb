<h4>What is TextSomebody?</h4>
<p>
  TextSomebody is a web application that allows a user to initiate a text-message 
  conversation with any SMS-enabled device, and to share the contents of that 
  conversation through a unique url.
</p>
<h4>How does it work?</h4>
<p>
  TextSomebody is built with Ruby On Rails, and makes use of ActionCable, Rails' 
  websocket API, to simulate the real-time feel of a text-message conversation. 
  It depends on Twilio's API for sending and receiving messages.
</p>
<%= image_tag "textsomebodydiagram.png" %>
<p></p>
<h5>Creating a Conversation</h5>
<p>
  When a user submits a valid phone number through the form at the application's 
  root path, three things happen:
</p>
<ol>
  <li>A new conversation resource is created in the database</li>
  <li>A cookie is set on the user's browser, identifying them as the creator of 
  this conversation</li>
  <li>The user is redirected to the url where the new conversation is displayed</li>
</ol>
<pre>
          DEMO GIF
</pre>
<p>
  At this point, the new conversation is just a blank space. Now it's time to create 
  some messages for it.
</p>
<h5>Sending Messages</h5>
<p>
  The user's view of the conversation will display the form they'll use to create 
  new messages.
</p>
<pre>
          DEMO GIF OF MESSAGE BEING CREATED
</pre>
<p>
  Notice that the new message appears in the conversation without a page reload. 
  If we were relying only on the HTTP request/response cycle, the user would have 
  to refresh the page every time they wanted to check for new messages. But using 
  websocket technology, our server updates the page every time a new message is 
  added to the conversation, without the user having to do anything at all.
</p>
<p>
  There are a couple of steps we need to take in order to take advantage of this 
  technology. First, we use an Active Record Callback in our Message model. This 
  will allow us to specify an action to be taken at a particular point in the 
  lifecycle of an Active Record Object. In this case, whenever a new message is 
  saved and committed to the database, we want to broadcast it over a channel 
  identified by the conversation that message belongs to.
</p>
<pre>     after_create_commit { broadcast_append_to self.conversation }</pre>
<p>
  Next, we need to make sure that any client viewing a conversation is subscribed 
  to the channel that carries that conversation's new messages. We do this by adding 
  the turbo_stream_from tag to the view template.
</p>
<pre>
      <%%= turbo_stream_from @conversation %>
</pre>
<p>
  By default, when the client receives the broadcast, it will look to append the new 
  message to an element with an id of "messages". If there isn't one on the page, 
  nothing will happen. So we must make sure the parent element of the rendered 
  messages is appropriately named.
</p>
<pre>
      &lt;div id="messages"&gt;
        <%%= render @conversation.messages %>
      &lt;/div&gt;
</pre>
<p>
  Now the message has been created, joined to its parent conversation, and displayed 
  on the page. But to actually send it as an SMS message, we need to integrate our 
  application with the Twilio API.
</p>
<h5>Integrating the Twilio API</h5>
<p>
  To use the Twilio API to send SMS messages, two things are required. First, you must 
  register with Twilio and obtain account credentials. Second, you need a Twilio phone 
  number to serve as the "from" number.
</p>
<p>
  With the account credentials and phone number in hand, the most convenient way to 
  use the Twilio API in a Ruby application is to install the twilio-ruby gem and use the 
  Client wrapper class. For this to work, you must make the account credentials 
  accessible through environment variables, specifically "TWILIO_ACCOUNT_SID" and 
  "TWILIO_AUTH_TOKEN." We've set "TWILIO_FROM_NUMBER" as an environment variable as well. 
</p>
<pre>
      client = Twilio::REST::Client.new
      client.messages.create(
        from: ENV['TWILIO_FROM_NUMBER'],
        body: "This SMS message was sent through Twilio by TextSomebody!",
        to: "+15555555555" # The recipient's phone number goes here.
      )
</pre>
<p>
  We want to invoke this code every time a new message is added to the database. Therefore, 
  it makes sense to put it in the create method of the MessagesController. However, each 
  message is sent to one and only one "to:" number, which is owned by the Conversation to 
  which that message belongs.
</p>
  Considering this, we decided to extract the Twilio code to a method defined on the 
  Conversation model, which is invoked in the Message#create method.
<pre>

    # In app/controllers/messages_controller.rb

      def create
        @conversation = Conversation.find(params[:conversation_id])
        @message = @conversation.messages.build(msg_params)
        if @message.save
          @conversation.send_sms(params[:message][:body])
        end
      end

    # In app/models/conversation.rb

      def send_sms(body)
        client = Twilio::REST::Client.new
        client.messages.create(
          from: ENV['TWILIO_FROM_NUMBER'],
          body: body,
          to: number
        )
      end
</pre>
<h5>Receiving Messages</h5>
<p>
  When we send a message with TextSomebody, it will appear on the recipient's device as 
  having come from the number designated in our environment variables as 
  "TWILIO_FROM_NUMBER". Naturally, when they reply, this is also the number their reply 
  will be sent to. What happens when they reply to that number?
</p>
<p>
  One of the features of Twilio's Programmable SMS API is that it can send a webhook to 
  a specified URL every time a message is received by a Twilio phone number. To take 
  advantage of this, we set up a route in our app specifically for webhooks generated by 
  incoming messages, and a controller to handle requests for that path.
</p>
<pre>
        # Add to config/routes.rb

          post '/incoming_messages', to: "incoming_messages#create"


        # app/controllers/incoming_messages_controller.rb

          class IncomingMessagesController < ApplicationController
            skip_before_action :verify_authenticity_token
          
            def create
              num = params[:From].slice(2, 11) # Remove "+1" at beginning of string 
              @conversation = Conversation.find_by(number: num)
              @message = @conversation.messages.build(body: params[:Body])
              @message.incoming = true
              @message.save
              response.status = 204
            end
          end
</pre>
<p>
  We are interested in two properties of the webhook's payload: "From" and "Body". The 
  "From" property is the phone number the incoming message was sent from. This is what 
  we use to find the conversation this message should be associated with.
</p>
<p>
  The "Body" property is the text of the message itself, which is added to the database 
  in the same way that outgoing messages are. As soon as the transaction is committed, 
  the new message is broadcast over the conversation's channel, so that anyone viewing 
  the conversation will see it updated with the new message in real time.
</p>